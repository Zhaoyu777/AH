#!/usr/bin/env php
<?php
echos("---------------a command for build plugin apps---------------------------------");
echos("-- bin/build-app        --- build All app  in plugins folder");
echos("-- bin/build-app n      --- build All app  in plugins folder and compile js");
echos("-- bin/build-app Vip    --- build Vip app");
echos("-- bin/build-app Vip  n --- build Vip app and compile js");
usleep(500000);

array_shift($argv);
$argument_count = $argc - 1;
$arguments = $argv;

$base_folder = 'plugins';
$default_skip_js = '_';
$skip_js_arguments = ['y', 'Y', 'n', 'N'];
$plugins = [];

if ($argument_count > 0) {
    $skip_js = end($arguments);
    if (in_array($skip_js, $skip_js_arguments)) {
        $default_skip_js = strtolower($skip_js);
        array_pop($arguments);
    }
    $plugins = $arguments;
}


build_app($default_skip_js, $plugins);

function build_app($default_skip_js, $plugins)
{
    check_plugin($plugins);
    compile_js($default_skip_js);
    build_plugin($plugins);
}

function compile_js($skip_js)
{
    if ($skip_js == 'n') {
       #remove node modules folder and caches folder 
        echos("remove old node_modules and app/caches using command : rm - rf app/caches node_modules");
        exec('rm -rf app/caches node_modules');
        exec('yarn');

        #compile static resource file with webpack
        echos("compile static resource file with webpack using command : npm run compile");
        exec('npm run compile');
    }
    else {
        echos(" WARING !!!skip compile js . ");
    }

}
function build_plugin($plugins)
{
    $root_dir = __DIR__ . "/../plugins/";

    if (empty($plugins)) {
        $folders = scandir($root_dir);
        foreach ($folders as $folder) {
            if (is_dir($root_dir . $folder) && !in_array($folder, array(".", ".."))) {
                array_push($plugins, substr($folder, 0, strpos($folder, 'Plugin')));
            }
        }
    }
    foreach ($plugins as $plugin) {
        $full_path = $root_dir . $plugin . "Plugin";
        echos($plugin . " is in " . exec("git rev-parse --abbrev-ref HEAD"));
        exec_shell("cd $full_path && git pull && cd ../..");
        usleep(100000);
        exec_shell("app/console build:plugin-app $plugin");
    }
}

function check_plugin($plugins)
{
    $none_exists = [];
    $root_dir = __DIR__ . "/../plugins/";
    if (empty($plugins)) {
        return true;
    }
    foreach ($plugins as $plugin) {
        if (!file_exists($root_dir . $plugin . "Plugin")) {
            array_push($none_exists, $root_dir . $plugin . "Plugin");
        }
    }

    if (!empty($none_exists)) {
        echos(implode("\n", $none_exists) . " 插件不存在 ，请检查插件名称是否正确");
        exit;
    }

}
function echos($msg)
{
    echo $msg . "\n";
}

function exec_shell($cmd)
{
    $proc = proc_open(
        $cmd,
        array(
            array("pipe", "r"),
            array("pipe", "w"),
            array("pipe", "w")
        ),
        $pipes
    );
    print stream_get_contents($pipes[1]);
    echos("---" . $cmd . "is ok");
    echos(" ");

}