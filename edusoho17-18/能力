专业知识
TDD开发模式
面向接口编程




执行能力
执行、处理事物的方法与经验



学习能力

学习能力
反省检讨

翘板定律
250
少即使多
两秒定律

开发原则
遵循单一职责原的优点有：

    可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；
    提高类的可读性，提高系统的可维护性；
    变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。

需要说明的一点是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。

里氏替换原则通俗的来讲就是：

子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义： 
1.子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。 
2.子类中可以增加自己特有的方法。 
3.当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。 
4.当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。


看上去很不可思议，因为我们会发现在自己编程中常常会违反里氏替换原则，程序照样跑的好好的。 
所以大家都会产生这样的疑问，假如我非要不遵循里氏替换原则会有什么后果？ 
后果就是：你写的代码出问题的几率将会大大增加。


在实际编程中，我们一般需要做到如下3点： 
1.低层模块尽量都要有抽象类或接口，或者两者都有。 
2.变量的声明类型尽量是抽象类或接口。使用继承时遵循里氏替换原则。 
3.依赖倒置原则的核心就是要我们面向接口编程，理解了面向接口编程，也就理解了依赖倒置。

采用接口隔离原则对接口进行约束时，要注意以下几点： 
1.接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。 
2.为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。 
3.提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。 
运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。


迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。 
但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系，例如本例中， 
总公司就是通过分公司这个“中介”来与分公司的员工发生联系的。 
过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。 
所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。



